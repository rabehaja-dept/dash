// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

import type { Entry } from "contentful";
import type { Document } from "@contentful/rich-text-types";

export interface IAccordionFields {
  /** Title */
  title?: LocalizedField<string> | undefined;

  /** Pretext */
  pretext?: LocalizedField<string> | undefined;

  /** Accordion Items */
  accordionItems: DefaultLocalizedField<IAccordionItem[]>;

  /** Is this a FAQ Section? */
  isFAQ?: DefaultLocalizedField<boolean> | undefined;
}

/** An accordion with multiple expandable/collapsible accordion items. */

export interface IAccordion extends Entry<IAccordionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "accordion";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IAccordionItemFields {
  /** Title */
  title: LocalizedField<string>;

  /** Body */
  body: LocalizedField<string>;
}

/** A single expandable/collapsible accordion item. */

export interface IAccordionItem extends Entry<IAccordionItemFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "accordionItem";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IAlertBannerFields {
  /** Content */
  content: DefaultLocalizedField<string>;
}

/** An alert banner to show at the top of the website. */

export interface IAlertBanner extends Entry<IAlertBannerFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "alertBanner";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface ICardFields {
  /** Title */
  title: LocalizedField<string>;

  /** Body */
  body: LocalizedField<string>;

  /** Image */
  image?: LocalizedField<Asset> | undefined;

  /** Button Label */
  buttonLabel?: LocalizedField<string> | undefined;

  /** Button URL */
  buttonUrl?: DefaultLocalizedField<string> | undefined;
}

/** A card that appears inside a grid section. */

export interface ICard extends Entry<ICardFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "card";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IFeatureFields {
  /** Title */
  title: LocalizedField<string>;

  /** Body */
  body: LocalizedField<string>;

  /** Content Position */
  contentPosition: DefaultLocalizedField<"left" | "right">;

  /** Text Align */
  textAlign: DefaultLocalizedField<"left" | "center">;

  /** Background Color */
  backgroundColor?: DefaultLocalizedField<string> | undefined;

  /** Image */
  image?: LocalizedField<Asset> | undefined;

  /** Button Label */
  buttonLabel?: LocalizedField<string> | undefined;

  /** Button URL */
  buttonUrl?: DefaultLocalizedField<string> | undefined;
}

/** A feature block showcasing an image and some text. */

export interface IFeature extends Entry<IFeatureFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "feature";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IGridSectionFields {
  /** Title */
  title?: LocalizedField<string> | undefined;

  /** Subtext */
  subtext?: LocalizedField<string> | undefined;

  /** Max Columns */
  maxColumns: DefaultLocalizedField<number>;

  /** Cards */
  cards: DefaultLocalizedField<ICard[]>;
}

/** A grid section containing a title and cards. */

export interface IGridSection extends Entry<IGridSectionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "gridSection";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IHeroFields {
  /** Title */
  title: LocalizedField<string>;

  /** Size */
  size: DefaultLocalizedField<"small" | "medium" | "large" | "responsive">;

  /** Pretext */
  pretext?: LocalizedField<string> | undefined;

  /** Subtext */
  subtext?: LocalizedField<string> | undefined;

  /** Background Color */
  backgroundColor?: DefaultLocalizedField<string> | undefined;

  /** Background Image */
  backgroundImage?: DefaultLocalizedField<Asset> | undefined;

  /** Button Label */
  buttonLabel?: LocalizedField<string> | undefined;

  /** Button URL */
  buttonUrl?: LocalizedField<string> | undefined;

  /** Top Mask */
  topMask?: DefaultLocalizedField<boolean> | undefined;

  /** Bottom Mask */
  bottomMask?: DefaultLocalizedField<boolean> | undefined;

  /** Rounded */
  rounded?: DefaultLocalizedField<boolean> | undefined;
}

export interface IHero extends Entry<IHeroFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "hero";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IMigrationFields {
  /** Migration State */
  state: DefaultLocalizedField<Record<string, any>>;

  /** Content Type ID */
  contentTypeId: DefaultLocalizedField<string>;
}

/** Meta data to store the state of content model through migrations */

export interface IMigration extends Entry<IMigrationFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "migration";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface INavContainerFields {
  /** ID */
  id: DefaultLocalizedField<string>;

  /** Label */
  label: LocalizedField<string>;

  /** Items */
  items: DefaultLocalizedField<(INavContainer | INavItem)[]>;
}

/** A navigation container that holds navigation items or additional nested navigation containers. */

export interface INavContainer extends Entry<INavContainerFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "navContainer";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface INavItemFields {
  /** Label */
  label: LocalizedField<string>;

  /** URL */
  url: DefaultLocalizedField<string>;

  /** External URL? */
  externalUrl: DefaultLocalizedField<boolean>;
}

/** A single navigation item (usually rendered as a link or button). */

export interface INavItem extends Entry<INavItemFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "navItem";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IPageFields {
  /** Title */
  title: LocalizedField<string>;

  /** Slug */
  slug: DefaultLocalizedField<string>;

  /** OpenGraph Image */
  openGraphImage?: DefaultLocalizedField<Asset> | undefined;

  /** Description */
  description: LocalizedField<string>;

  /** Body */
  body?: LocalizedField<Document> | undefined;
}

export interface IPage extends Entry<IPageFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "page";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export interface IPostFields {
  /** Title */
  title: LocalizedField<string>;

  /** Slug */
  slug: DefaultLocalizedField<string>;

  /** Image */
  image?: DefaultLocalizedField<Asset> | undefined;

  /** Description */
  description?: LocalizedField<string> | undefined;

  /** Body */
  body?: LocalizedField<Document> | undefined;
}

export interface IPost extends Entry<IPostFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: "post";
        linkType: "ContentType";
        type: "Link";
      };
    };
  };
}

export type CONTENT_TYPE =
  | "accordion"
  | "accordionItem"
  | "alertBanner"
  | "card"
  | "feature"
  | "gridSection"
  | "hero"
  | "migration"
  | "navContainer"
  | "navItem"
  | "page"
  | "post";

export type LOCALE_CODE = "en-US" | "nl-NL";

export type CONTENTFUL_DEFAULT_LOCALE_CODE = "en-US";

export type DefaultLocalizedField<T> = Record<
  CONTENTFUL_DEFAULT_LOCALE_CODE,
  T
>;
export type LocalizedField<T> = DefaultLocalizedField<T> &
  Partial<Record<LOCALE_CODE, T>>;

// We have to use our own localized version of Asset because of a bug in contentful https://github.com/contentful/contentful.js/issues/208
export interface Asset {
  sys: Sys;
  fields: {
    title: LocalizedField<string>;
    description: LocalizedField<string>;
    file: LocalizedField<{
      url: string;
      details: {
        size: number;
        image?: {
          width: number;
          height: number;
        };
      };
      fileName: string;
      contentType: string;
    }>;
  };
  toPlainObject(): object;
}

// When you specify a locale in contentful `client.getEntries`, the shape of the
// return value is different. This adapter class unwraps LocalizedField<T> and
// DefaultLocalizedField<T> to just T. There are also versions for ISomethingFields
// and Entry<ISomethingFields>
export type SpecificLocaleField<T> = T extends LocalizedField<infer F>
  ? SpecificLocaleMaybeEntry<F>
  : T extends DefaultLocalizedField<infer F>
  ? SpecificLocaleMaybeEntry<F>
  : T;

export type SpecificLocaleFields<T> = {
  [k in keyof T]: SpecificLocaleField<T[k]>;
};

// when a content type refers to another content type with nested
// entries or a reference field, we need to unwrap the nested
// locales too.
type SpecificLocaleMaybeEntry<T> = T extends Entry<infer E>
  ? SpecificLocale<Entry<E>>
  : T extends Entry<infer E>
  ? SpecificLocale<Entry<E>>
  : T extends Array<Entry<infer E>>
  ? Array<SpecificLocale<Entry<E>>>
  : T extends Asset
  ? SpecificLocale<Asset>
  : T extends Array<Asset>
  ? Array<SpecificLocale<Asset>>
  : T;

export type SpecificLocale<T extends { fields: any }> = Omit<T, "fields"> & {
  fields: SpecificLocaleFields<T["fields"]>;
};
