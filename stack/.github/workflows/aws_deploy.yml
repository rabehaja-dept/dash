name: ⛴  Release & Deploy 💨
concurrency:
  group: ${{ github.workflow }}-deploy-${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string

jobs:
  deploy:
    name: 🛳 Ship it 💨
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
      # @dash-remove-start strapi
      STRAPI_AWS_ACCESS_KEY_ID: ${{ secrets.STRAPI_AWS_ACCESS_KEY_ID }}
      STRAPI_AWS_SECRET_ACCESS_KEY: ${{ secrets.STRAPI_AWS_SECRET_ACCESS_KEY }}
      STRAPI_AWS_REGION: ${{ secrets.STRAPI_AWS_REGION }}
      STRAPI_AWS_BUCKET_NAME: ${{ secrets.STRAPI_AWS_BUCKET_NAME }}
      # @dash-remove-end
      # @dash-remove-start aws
      CDK_DEFAULT_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
      CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
      MAIN_DOMAIN_NAME: ${{ secrets.MAIN_DOMAIN_NAME }}
      MAIN_CDK_CERTIFICATE_VALIDATION: ${{ secrets.MAIN_CDK_CERTIFICATE_VALIDATION }}
      MAIN_ROUTE53_HOSTED_ZONE_DOMAIN: ${{ secrets.MAIN_ROUTE53_HOSTED_ZONE_DOMAIN }}
      MAIN_CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.MAIN_CLOUDFRONT_CERTIFICATE_ARN }}
      MAIN_LOAD_BALANCER_CERTIFICATE_ARN: ${{ secrets.MAIN_LOAD_BALANCER_CERTIFICATE_ARN }}
      # @dash-remove-end
      # @dash-remove-start staging
      STAGING_DOMAIN_NAME: ${{ secrets.STAGING_DOMAIN_NAME }}
      STAGING_CDK_CERTIFICATE_VALIDATION: ${{ secrets.STAGING_CDK_CERTIFICATE_VALIDATION }}
      STAGING_ROUTE53_HOSTED_ZONE_DOMAIN: ${{ secrets.STAGING_ROUTE53_HOSTED_ZONE_DOMAIN }}
      STAGING_CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.STAGING_CLOUDFRONT_CERTIFICATE_ARN }}
      STAGING_LOAD_BALANCER_CERTIFICATE_ARN: ${{ secrets.STAGING_LOAD_BALANCER_CERTIFICATE_ARN }}
      # @dash-remove-end
      # @dash-remove-start production
      PRODUCTION_DOMAIN_NAME: ${{ secrets.PRODUCTION_DOMAIN_NAME }}
      PRODUCTION_CDK_CERTIFICATE_VALIDATION: ${{ secrets.PRODUCTION_CDK_CERTIFICATE_VALIDATION }}
      PRODUCTION_ROUTE53_HOSTED_ZONE_DOMAIN: ${{ secrets.PRODUCTION_ROUTE53_HOSTED_ZONE_DOMAIN }}
      PRODUCTION_CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.PRODUCTION_CLOUDFRONT_CERTIFICATE_ARN }}
      PRODUCTION_LOAD_BALANCER_CERTIFICATE_ARN: ${{ secrets.PRODUCTION_LOAD_BALANCER_CERTIFICATE_ARN }}
      # @dash-remove-end
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 🕵 Inspect Environment
        id: inspect-env
        run: |
          STAGE=$(echo ${{ github.ref }} | sed 's|refs/heads/||g')
          PROJECT_NAME=$(jq -r .name package.json)
          echo "{stage}={$STAGE}" >> $GITHUB_OUTPUT
          echo "{project-name}={$PROJECT_NAME}" >> $GITHUB_OUTPUT

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: cdk/package-lock.json

      - name: 📥 Download dependencies
        run: |
          npm install --prefix cdk

      - name: 🚚 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CDK_DEFAULT_REGION }}

      # @dash-remove-start contentful
      - name: 🚜 Contentful migrations
        working-directory: contentful
        env:
          CI: true
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_MANAGEMENT_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_ACCESS_TOKEN }}
        run: |
          STAGE=${{ steps.inspect-env.outputs.stage }}
          npm install
          if [[ -z "${CONTENTFUL_SPACE_ID-}" ]]; then
            echo "Skipping migrations, as this project does not have a CONTENTFUL_SPACE_ID set"
            exit 0
          elif [[ $CONTENTFUL_SPACE_ID = "jcdjo56lmw8q" ]]; then
            echo "Skipping migrations, as this project does not have permission to migrate the demo contentful space."
            exit 0
          fi

          if [[ $STAGE == 'production' ]]; then
            export CONTENTFUL_ENV_ID=master
          elif curl \
              --header "Authorization: Bearer $CONTENTFUL_MANAGEMENT_ACCESS_TOKEN" \
              https://api.contentful.com/spaces/$CONTENTFUL_SPACE_ID/environments \
              | jq -r  '.items | .[] | .sys.id' | grep $STAGE; then
            # if there is a contentful environment named for the current stage, migrate that.
            export CONTENTFUL_ENV_ID=$STAGE
          else
            echo "Unable to find a contentful environment whose name matches this deploy stage (STAGE=$STAGE)"
            exit 1
          fi
          npm run migrate
        # @dash-remove-end

      - name: 🚢 Deploy everything 💨
        working-directory: cdk
        run: npx cdk deploy DeptDash-${{ steps.inspect-env.outputs.project-name }}-${{ steps.inspect-env.outputs.stage }} --require-approval never
